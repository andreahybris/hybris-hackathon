<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ [y] hybris Platform
  ~
  ~ Copyright (c) 2000-2016 hybris AG
  ~ All rights reserved.
  ~
  ~ This software is the confidential and proprietary information of hybris
  ~ ("Confidential Information"). You shall not disclose such Confidential
  ~ Information and shall use it only in accordance with the terms of the
  ~ license agreement you entered into with hybris.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

    <bean id="requiredPropertiesProd" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:META-INF/default.properties</value>
                <value>classpath:modify-me.properties</value>
            </list>
        </property>
    </bean>

    <context:property-placeholder local-override="true" properties-ref="requiredPropertiesProd" ignore-resource-not-found="true"
                                  ignore-unresolvable="true"/>

    <bean id="restClientProto" class="com.hybris.cdm.commons.restclient.RestClientFactory" abstract="true">

        <property name="oauthEnabled" value="${rest.client.oauth.enabled}" />
        <property name="clientId" value="${rest.client.oauth.clientId}" />
        <property name="clientSecret" value="${rest.client.oauth.clientSecret}" />
        <property name="scopes" value="${rest.client.oauth.scopes}" />
        <property name="checkScopesDuringAuth" value="${rest.client.oauth.checkScopes}"/>
        <property name="accessTokenProvider" ref="clientCredentialsGrantProvider" />
        <property name="authorizedHeaderRewriter" ref="authorizedHeaderRewriter" />

        <property name="basicAuthEnabled" value="${rest.client.basicAuth.enabled}" />
        <property name="username" value="${rest.client.basicAuth.username}" />
        <property name="password" value="${rest.client.basicAuth.password}" />

        <property name="connectTimeoutMs" value="${rest.client.connectTimeoutMS}" />
        <property name="contentType" value="${rest.client.contentType}" />
        <property name="hystrixCommandFactory" ref="hystrixCommandFactory" />
        <property name="readTimeoutMs" value="${rest.client.readTimeoutMS}" />
        <property name="restClientLoggingEnabled" value="${rest.client.logger.enabled}" />
        <property name="retryStrategy" ref="retryStrategy" />
        <property name="clientType" value="SERVICE" />

        <property name="collapsibleRequestExecutor" ref="internalCollapsibleRequestExecutor"/>
    </bean>

    <bean id="internalCollapsibleRequestExecutor" class="com.hybris.cdm.commons.hystrix.collapser.DefaultCollapsibleRequestExecutor">
        <constructor-arg name="commandProvider" ref="collapserHystrixCommandProvider"/>
        <constructor-arg name="requestIdGenerationStrategy" ref="requestIdGenerationStrategy" />
        <constructor-arg name="requestCache" ref="requestCache"/>
    </bean>

    <bean id="collapserHystrixCommandProvider" class="com.hybris.cdm.commons.hystrix.collapser.DefaultCollapserHystrixCommandProvider">
        <constructor-arg name="commandFactory" ref="hystrixCommandFactory"/>
    </bean>

    <bean id="requestIdGenerationStrategy" class="com.hybris.cdm.commons.hystrix.collapser.UUIDRequestIdGenerationStrategy"/>


    <bean id="authorizedHeaderRewriter" class="com.hybris.cdm.commons.oauth.AuthorizedHeaderRewriter" />

    <bean id="clientCredentialsGrantProvider" class="com.hybris.cdm.commons.oauth.impl.ClientCredentialsGrantProvider">
        <property name="authorizationUri" value="${rest.client.oauth.authorizationUrl}/token" />
        <property name="clientId" value="${rest.client.oauth.clientId}" />
        <property name="clientSecret" value="${rest.client.oauth.clientSecret}" />
        <property name="client">
            <bean class="com.hybris.cdm.commons.restclient.RestClientFactory">
                <property name="oauthEnabled" value="false" />
                <property name="contentType" value="application/x-www-form-urlencoded" />
                <property name="acceptType" value="application/json" />
                <property name="connectTimeoutMs" value="${rest.client.oauth.connectTimeoutMS}" />
                <property name="readTimeoutMs" value="${rest.client.oauth.readTimeoutMS}" />
                <property name="restClientLoggingEnabled" value="${rest.client.logger.enabled}" />
                <property name="threadPoolMaxSize" value="${hystrix.threadPool.oauth.coreSize}" />
                <property name="threadPoolName" value="oauth" />
                <property name="cached" value="true" />
                <property name="hystrixCommandFactory" ref="hystrixCommandFactory" />
                <property name="retryStrategy" ref="retryStrategy"/>
                <property name="clientType" value="SERVICE" />
            </bean>
        </property>
        <property name="tokenTransformer">
            <bean class="com.hybris.cdm.commons.oauth.AccessTokenTransformer" />
        </property>
    </bean>

    <bean id="hystrixCommandFactory" class="com.hybris.cdm.commons.hystrix.HystrixCommandFactory">
        <constructor-arg name="defaultCommandTimeoutMs" value="5000" />
        <constructor-arg name="deaultThreadPoolSize" value="16" />
        <constructor-arg name="hystrixServiceName" value="${hystrix.service.name}" />
        <constructor-arg name="cache" ref="requestCache"/>
    </bean>

    <bean id="requestCache" class="com.hybris.cdm.commons.hystrix.RequestCache">
        <property name="cacheSize" value="1000" />
        <property name="cacheTimeoutInMinutes" value="5" />
    </bean>

    <bean id="retryStrategy" class="com.hybris.cdm.commons.restclient.retryStrategies.DefaultRetryStrategy" >
        <constructor-arg name="timeoutMs" value="${hystrix.command.defaultTimeoutMS}" />
        <constructor-arg name="callTimeoutMs" value="${rest.client.retryStrategy.callTimeoutMs}" />
        <constructor-arg name="retriesCount" value="${rest.client.retryStrategy.retriesCount}" />
        <constructor-arg name="retryStatuses">
            <list value-type="java.lang.Integer">
                <value>503</value>
                <value>429</value>
                <value>408</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="graphRestClient" parent="restClientProto">
        <property name="oauthEnabled" value="${graph.rest.client.oauth.enabled}"/>
        <property name="basicAuthEnabled" value="${graph.rest.client.basicAuth.enabled}" />
    </bean>

    <!-- Enricher specific -->
    <bean id="otherSchemaUriFactory" class="com.hybris.yprofile.schema.SchemaUriFactory">
        <constructor-arg name="globalSchemaPrefix" value="${schemaGlobalPrefix}" />
    </bean>

    <bean id="graphService" class="com.hybris.yprofile.securegraph.SecureGraphService">
        <property name="restClient" ref="graphRestClient" />
        <property name="schemaUriFactory" ref="otherSchemaUriFactory"/>
    </bean>

    <bean id="pubSubService" class="com.hybris.yprofile.pubsub.PubSubService">
        <constructor-arg name="contextRepository" ref="contextRepository"/>
        <constructor-arg name="topic" value="${hybris.client}"/>
        <constructor-arg name="topicOwner" value="profile.profile-dispatcher"/>
        <constructor-arg name="pubSubClient" ref="abstractPubSubClient"/>

    </bean>

    <bean id="contextRepositoryRestClient" parent="restClientProto">
        <property name="threadPoolMaxSize" value="${context.hystrix.threadPoolSize}" />
        <property name="oauthEnabled" value="${context.rest.client.oauth.enabled:false}" />
        <property name="basicAuthEnabled" value="${context.rest.client.basicAuth.enabled:false}" />
    </bean>

    <bean id="contextRepository"
          class="com.hybris.cdm.commons.enricher.service.context.DefaultContextRepository">
        <property name="hybrisClient" value="${hybris.client}" />
        <property name="contextUrl" value="" />
        <property name="contextRepositoryClient" ref="contextRepositoryRestClient" />
    </bean>

    <bean id="abstractPubSubClient" class="com.hybris.cdm.commons.pubsub.PubSubClient">
        <constructor-arg value="${pubsub.url}" />
        <property name="restClient" ref="contextRepositoryRestClient"/>
        <property name="eventsMetricsProvider" ref="eventMetricsProvider" />
        <property name="metamodelRelativeSchemaPattern" value="${metamodel.relativeSchemaPattern}" />
    </bean>

    <bean id="eventMetricsProvider"
          class="com.hybris.cdm.commons.events.metrics.DefaultEventMetricsProvider" />


</beans>